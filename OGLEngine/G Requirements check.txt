HOW TO READ TASKS AS COMPLETED OR NOT: 
"+" means task has been completed, 
"-+" means task is in progress or partly complete, 
"-" means task has had no work done on it.


UI (module 2):

To pass (G), complete the following tasks:
+ UI Framework set up (imgui or other alternative) --> (IMGUI)

+ Implement Entity and EntityManager classes --> (GAMEOBJECT AND GAMEOBJECTMANAGER)

+ Ability to manipulate Entity name, model, texture, position, rotation in the UI --> (CHECK)

+ Ability to render all entities --> (CHECK)

+ .obj-file loader implemented, including Vertices and Faces --> (CHECK)

+ Implement MeshManager which can load meshes, cache and re-use them --> (CHECK)

+ Write a small Game Engine Architecture document (2 pages minimum) --> (CHECK, will add to it as times goes on)

+ Implement Message class, including 2 sub-classes, and use them in at least 1 communication pattern between Managers in your project.
	//I'm now going to analyse above requirement: Message class. Subclasses of Message class, 
	//i.e. classes deriving from Message class. Use the subclasses in at least 1 communication pattern, 
	//observer pattern or mediator pattern I presume, between two managers in your project. Send and receive messages between two managers.

+ Implement the MessageQueue functions in at least 1 Manager and demonstrate usage. --> (MESHMANAGER).
	//I'm now going to analyse above requirement: implement QueueMessage, ProcessMessages and ProcessMessage in one manager.

+ Implement Memory checking functions, use it in one manager's allocations --> (CHECK, MESHMANAGER, didn't Emil do a remark about this? Yes, I've now done this task more properly, blocking a mesh load if available memory is less than say 500MB. And displaying an error popup modal if this happens.)

+ Implement serialization (ReadFrom, WriteTo file) for your Mesh class --> (HANDLED IN OBJREADER)

+ Implement Thread and Mutex functionality and run one of your message-supported Managers in its own thread, communicating only with messages.

+ Implement a Camera class and UI to configure it for rendering your scene --> (CHECK, UI PART IN EDITORGUI)

+ Integrate one Texture-loader of choice (besides glfw) --> (STB_IMAGE)
 


To pass with distinction (VG), complete 3 or more bonus tasks:
-+ Extend .obj-file loader to load UVs, Normals and support Triangulization --> (CHECK, as we can see further below in the Graphics Module tasks, though I have NOT implemented any Triangulation.)
- Implement iterative resource (.obj-file or texture) loading to support loading huge files in single-threaded contexts
-+ Implement a Camera Manager and ability to switch between different cameras, as well as key-bindings for simple camera movement (WSAD, arrow keys) --> (CHECK, camera movement implemented, but not multiple cameras if I don't count from lights point of view when generating shadow maps.)
- Implement your own PNG-loader using zlib
- Implement serialization for your scene/level (Entities, meta-data)









GRAPHICS (module 3):

To pass (G), complete the following tasks:
+ Update Obj loader to support loading and buffering UVs and Normals to OpenGL --> (CHECK, modifications to ObjReader and addition of vboindexer, also BufferMesh() in Mesh class.)

+ Implement usage of Diffuse/Albedo maps and Specular (shininess) maps, including UI to set per entity and using in shader --> (CHECK) //take ex red value for shininess.

+ Add MipMap settings (scene-wide, or per entity) --> (CHECK, per entity with MeshComponent)

+ Implement Phong shader, supporting multiple lights and light types --> (CHECK)

+ Add 3 different types of lights to your scene, Point, Directional, Spot light --> (CHECK, can't save scenes at the moment so I have to add them manually every time.)

+ Add UI to configure all light properties, Create and Delete --> (CHECK, create and delete happens when I add/remove a LightComponent and also when I change the light type in its properties.)

+ Implement either: Shadow mapping, or Deferred Rendering --> (CHECK, shadowmapping being worked on)


 
To pass with distinction (VG), in addition to the above, complete one of the following:
- Implement normal mapping
- Implement render pipeline supporting both Shadow Mapping and Deferred Rendering combined
- Implement Blend shapes/Morph targets
- Implement Frustum Culling
 
.. and 2 or more bonus tasks:
- Add possibility to reload shaders in run-time using a key-binding or button
- Add a toggle to switch between a Flat shader and the Phong shader for your scene (Flat just samples albedo)
- Add a toggle to render your lights as wireframes
+ Add possibility to attach a light to an entity via a LightProperty --> (CHECK, in my case the LightProperty would be a LightComponent.)
- Use Uniform Buffer Objects to enable use of very many lights (requires Deferred)







PHYSICS (module 4)

To pass (G) complete the following tasks:
+ Sphere intersection --> (CHECK, simple distance check with radius as margin for Sphere-Sphere testing.)

+ Box intersection  --> (CHECK, SAT implementation for Box-Box testing, and a 'find closest point on Box surface' approach for Sphere-Box testing.)

+ Raycast intersection --> (CHECK, raycast has a start and end point, Ray-Sphere testing is similar to how Martin did it, and Ray-Box testing is similar to opengl-tutorial's custom Ray-OBB picking function. The main difference with my implementations here is that I also accound for the start and end point of the ray as opposed to having the ray go infinitely far in a certain direction.)

+ Collision response either â€“ Call function on intersect, bounce off intersecting collider --> (CHECK, Spheres can bounce off of other spheres and boxes. I use an impulse-based approach with linear velocity so these colliders can influence each other's velocities when colliding.)



To pass with distinction (VG), in addition to the above, complete one of the following: 
-+ Either, linear and angular velocity on spheres or mesh collider intersections --> (I only did linear velocity, I also have gravity being applied as well.)
