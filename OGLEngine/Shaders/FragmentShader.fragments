#version 330 core
out vec4 FragColor;
uniform sampler2D THEshadowMap;
struct Material 
{
	sampler2D diffuse;
	sampler2D specular;

	float shininess;
};

struct DirectionalLight 
{
	vec3 position;
	vec3 direction;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

struct PointLight 
{
	vec3 position;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	float constant;
	float linear;
	float quadratic;
};

struct SpotLight 
{
	vec3 position;
	vec3 direction;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	float constant;
	float linear;
	float quadratic;

	float cutoff;
	float outerCutoff;
};

#define NR_DIRECTIONAL_LIGHTS 3
#define NR_POINT_LIGHTS 3
#define NR_SPOT_LIGHTS 3

in vec2 texCoord;
in vec3 normal;
in vec3 FragPos;
in vec4 FragPosLightSpace;

uniform vec3 viewPos;
uniform DirectionalLight directionalLights[NR_DIRECTIONAL_LIGHTS];
uniform PointLight pointLights[NR_POINT_LIGHTS];
uniform SpotLight spotLights[NR_SPOT_LIGHTS];
uniform Material material;
uniform bool blinn;

//forward declare functions so we can define it below the main() function.
vec3 CalcDirectionalLight(DirectionalLight light, vec3 norm, vec3 viewDir, vec3 fragPos);							
vec3 CalcPointLight(PointLight light, vec3 norm, vec3 fragPos, vec3 viewDir); 
vec3 CalcSpotLight(SpotLight light, vec3 norm, vec3 fragPos, vec3 viewDir);
float CalcShadow(vec4 fragPosLightSpace);

void main()
{
	vec3 norm = normalize(normal);
	vec3 viewDir = normalize(viewPos - FragPos);

	//Final result
	vec3 result;

	for(int i = 0; i < NR_DIRECTIONAL_LIGHTS; i++)
	{
		result += CalcDirectionalLight(directionalLights[i], norm, viewDir, FragPos);
	}

	for(int i = 0; i < NR_POINT_LIGHTS; i++)
	{
		result += CalcPointLight(pointLights[i], norm, FragPos, viewDir);
	}

	for(int i = 0; i < NR_SPOT_LIGHTS; i++)
	{
		result += CalcSpotLight(spotLights[i], norm, FragPos, viewDir);
	}


	FragColor = vec4(result, 1.0f);
}


vec3 CalcDirectionalLight(DirectionalLight light, vec3 norm, vec3 viewDir, vec3 fragPos)
{
	//vec3 lightDir = normalize(-light.direction); 
	vec3 lightDir = normalize(light.position - fragPos); 
	vec3 halfwayDir = normalize(lightDir + viewDir);

	float diff = max(dot(norm,lightDir), 0.0f);

	vec3 reflectDir = reflect(-lightDir, norm); 
	float spec = 0.0f;
	if(blinn)
	{
		spec = pow(max(dot(norm, halfwayDir), 0.0f), material.shininess); //32 is the shininess value of the specular highlight. Increase the value, more shininess to the highlight with smaller radius, decrease the value, more matte highlight with larger radius.
	}
	else
	{
		spec = pow(max(dot(viewDir, reflectDir), 0.0f), material.shininess); //32 is the shininess value of the specular highlight. Increase the value, more shininess to the highlight with smaller radius, decrease the value, more matte highlight with larger radius.
	}

	vec3 ambient = light.ambient * vec3(texture(material.diffuse, texCoord));
	vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, texCoord));
	vec3 specular = light.specular * spec * vec3(texture(material.specular, texCoord));


	float shadow = CalcShadow(FragPosLightSpace);
	//return (ambient + diffuse + specular);
	return (ambient + (1.0f - shadow) * (diffuse + specular));
}

vec3 CalcPointLight(PointLight light, vec3 norm, vec3 fragPos, vec3 viewDir)
{
	light.constant = 1.0f; //we usually want the constant to be 1 in all scenarios, so i'm cheating and just setting it here instead of doing it in the light component.

	vec3 lightDir = normalize(light.position - fragPos); 
	vec3 halfwayDir = normalize(lightDir + viewDir);

	float diff = max(dot(norm,lightDir), 0.0f);

	vec3 reflectDir = reflect(-lightDir, norm); 
	float spec = 0.0f;
	if(blinn)
	{
		spec = pow(max(dot(norm, halfwayDir), 0.0f), material.shininess); 
	}
	else
	{
		spec = pow(max(dot(viewDir, reflectDir), 0.0f), material.shininess); 
	}

	float distance = length(light.position - fragPos);
	float attenuation = 1.0f / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

	vec3 ambient = light.ambient * vec3(texture(material.diffuse, texCoord));
	vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, texCoord));
	vec3 specular = light.specular * spec * vec3(texture(material.specular, texCoord));
	ambient *= attenuation;
	diffuse *= attenuation;
	specular *= attenuation;

	return (ambient + diffuse + specular);
}

vec3 CalcSpotLight(SpotLight light, vec3 norm, vec3 fragPos, vec3 viewDir)
{
	light.constant = 1.0f; //we usually want the constant to be 1 in all scenarios, so i'm cheating and just setting it here instead of doing it in the light component.

	vec3 lightDir = normalize(light.position - fragPos);
	vec3 halfwayDir = normalize(lightDir + viewDir);

	float diff = max(dot(norm,lightDir), 0.0f);

	vec3 reflectDir = reflect(-lightDir, norm); 
	float spec = 0.0f;
	if(blinn)
	{
		spec = pow(max(dot(norm, halfwayDir), 0.0f), material.shininess); 
	}
	else
	{
		spec = pow(max(dot(viewDir, reflectDir), 0.0f), material.shininess); 
	}
	
	float distance = length(light.position - fragPos);
	float attenuation = 1.0f / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

	float theta = dot(lightDir, normalize(-light.direction));
	float epsilon = (light.cutoff - light.outerCutoff);
	float intensity = clamp((theta - light.outerCutoff) / epsilon, 0.0f, 1.0f);

	vec3 ambient = light.ambient * vec3(texture(material.diffuse, texCoord));
	vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, texCoord));
	vec3 specular = light.specular * spec * vec3(texture(material.specular, texCoord));
	ambient *= attenuation * intensity;
	diffuse *= attenuation * intensity;
	specular *= attenuation * intensity;

	return (ambient + diffuse + specular);
}



float CalcShadow(vec4 fragPosLightSpace) //might have to do a CalcShadow function for each type of light.
{
	vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;

	projCoords = projCoords * 0.5f + 0.5f;

	float closestDepth = texture(THEshadowMap, projCoords.xy).r;

	float currentDepth = projCoords.z;

	//vec3 lightDir = normalize(light.position - fragPos);
	//float bias = max(0.05f * (1.0f - dot(norm, lightDir)), 0.005f);
	float bias = 0.001f;

	float shadow = 0.0f;
	vec2 texelSize = 1.0f / textureSize(THEshadowMap, 0);
	for(int x = -1; x <= 1; x++)
	{
		for(int y = -1; y <= 1; y++)
		{
			float pcfDepth = texture(THEshadowMap, projCoords.xy + vec2(x, y) * texelSize).r;
			shadow += currentDepth - bias > pcfDepth ? 1.0f : 0.0f; //determine if current fragment position in shadow or not.
		}
	}
	shadow /= 9.0f;
	//float shadow = currentDepth - bias > closestDepth ? 1.0f : 0.0f; //determine if current fragment position in shadow or not.

	if(projCoords.z > 1.0f)
	{
		shadow = 0.0f;
	}

	return shadow;
}