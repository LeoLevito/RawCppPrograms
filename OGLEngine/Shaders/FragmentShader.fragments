#version 330 core
out vec4 FragColor;

in vec2 texCoord;
in vec3 normal;
in vec3 fragPos;

uniform vec3 viewPos;

struct Material 
{
	sampler2D diffuse;
	sampler2D specular;
	//vec3 specular;
	float shininess;
};

uniform Material material;

struct Light 
{
	vec3 position;
	vec3 direction;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	float constant;
	float linear;
	float quadratic;

	float cutoff;
	float outerCutoff;
};

uniform Light light;

void main()
{
		//ambient
		vec3 ambient = light.ambient * vec3(texture(material.diffuse, texCoord));

		//diffuse
		vec3 norm = normalize(normal);
		vec3 lightDir = normalize(light.position - fragPos); //lightPos now follows the fragPos wherever it goes, need to change this to... world position (?).
		float diff = max(dot(norm,lightDir), 0.0f);
		vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, texCoord));

		//specular
		vec3 viewDir = normalize(viewPos - fragPos);
		vec3 reflectDir = reflect(-lightDir, norm); 
		float spec = pow(max(dot(viewDir, reflectDir), 0.0f), material.shininess); //32 is the shininess value of the specular highlight. Increase the value, more shininess to the highlight with smaller radius, decrease the value, more matte highlight with larger radius.
		vec3 specular = light.specular * spec * vec3(texture(material.specular, texCoord));

		//spotlight (soft edges)
		float theta = dot(lightDir, normalize(-light.direction));
		float epsilon = (light.cutoff - light.outerCutoff);
		float intensity = clamp((theta - light.outerCutoff) / epsilon, 0.0f, 1.0f);
		diffuse *= intensity;
		specular *= intensity;

		//attenuation
		float distance = length(light.position - fragPos);
		float attenuation = 1.0f / (light.constant + light.linear * distance + light.quadratic * (distance * distance));
		ambient *= attenuation;
		diffuse *= attenuation;
		specular *= attenuation;

		//Final result
		vec3 result = ambient + diffuse + specular;
		FragColor = vec4(result, 1.0f);
}